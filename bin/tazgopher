#!/usr/bin/perl

use strict;
use warnings;
use feature qw(say);
use utf8;
use Text::Wrap qw();
use IO::Handle;

use Mojo::IOLoop;
use Mojo::UserAgent;
use Mojo::ByteStream qw(b);
use Mojo::Util 'html_unescape';
use Mojo::Loader qw(data_section);
use Mojo::Template;
use Mojo::Parameters;

use Text::Unidecode qw();

use Taz::Article;
use Taz::List;

STDOUT->autoflush(1);

my $ua = Mojo::UserAgent->new;
$ua->transactor->name('tazgopher/1.0 (+gopher@taz.de)');

my $host;

if ( $ENV{REMOTE_ADDR} eq '193.104.220.35' ) {
    $host = 'ibpj4qv7mufde33w.onion';
}
else {
    $host = 'taz.de';
}

my $port = 70;

my %decode_chars = (
    'Ä'  => 'Ae',
    'ä'  => 'ae',
    'Ö'  => 'Oe',
    'ö'  => 'oe',
    'Ü'  => 'Ue',
    'ü'  => 'ue',
    'ß'  => 'ss',
    '“' => '"',
    '„' => '"',
);

sub fill {
    my ( $text, $init, $subsequent ) = @_;
    $init       ||= '';
    $subsequent ||= '';
    Text::Wrap::fill( $init, $subsequent, $text );
}

$/ = "\r\n";

my $selector = <STDIN>;
chomp($selector);

my $gophertype = 1;
if ( $selector =~ m{^/(.)(/.*)$} ) {
	$gophertype = $1;
	$selector = $2;
}

sub unidecode {
    my $text = shift;
    my $qr = join( '', keys %decode_chars );
    $text =~ s/([$qr])/$decode_chars{$1}/ge;
    $text =~ s/&amp;/&/g;
    $text = Text::Unidecode::unidecode($text);
    return $text;
}

sub format_text {
    my $text = shift;
    $text = fill($text);
    $text =~ s/^(.*)$/"i$1\t\t$host\t$port"/gem;
    return $text;
}

sub render {
    my ( $file, $vars ) = @_;
    my $mt = Mojo::Template->new( vars => 1, escape => \&format_text );
    no strict 'refs';
    no warnings 'redefine';
    local *{"@{[$mt->namespace]}::i"} =
      sub { my $t = shift; $t =~ s/^(.*)$/"i$1\t\t$host\t$port"/gem; return $t };
    local *{"@{[$mt->namespace]}::line"} = sub { $_[0] x $Text::Wrap::columns };
    local *{"@{[$mt->namespace]}::gophermap"} = sub {
        my ( $type, $headline, $selector ) = @_;
        join( "\t", "$type$headline", $selector, $host, $port );
    };
    $mt->parse( data_section(__PACKAGE__)->{$file} );
    my $output = unidecode( html_unescape( $mt->process($vars) ) );
    $output =~ s/\n/\r\n/g;
    print "$output.\r\n";
}

if ( $selector eq '' or $selector eq '/' or $selector eq '/!p4608' ) {

    my %articles_used;

    Mojo::IOLoop->delay(
        sub {
            my $delay = shift;
            $ua->get( 'http://taz.de/static/tazfbftp/xml/genossenschaft.xml' =>
                  $delay->begin );
            $ua->get( 'http://taz.de/!p4608/l.xml' => $delay->begin );
            $ua->get( 'http://taz.de/!p4608/c.xml' => $delay->begin );
        },
        sub {
            my ( $delay, $geno, $l_xml, $c_xml ) = @_;
            $delay->pass( $geno, $l_xml, $c_xml );
            for
              my $clip_id ( $l_xml->result->dom->find('pages page[type="clip"]')
                ->map( attr => 'id' )->each )
            {
                $ua->get( "http://taz.de/!p$clip_id/c-l.xml" => $delay->begin );
                $ua->get( "http://taz.de/!p$clip_id/c.xml"   => $delay->begin );
            }
        },
        sub {
            my ( $delay, $geno, @responses ) = @_;

            my $members_count =
              $geno->result->dom->at('item[role="members-count"] corpus')->text;

            my @lists;
            while (@responses) {
                my ( $l_xml, $c_xml ) = splice( @responses, 0, 2 );
                my $length = $l_xml->result->dom->find('linklist[type="self"]')
                  ->map( attr => 'length' )->reduce( sub { $a + $b } );

                push @lists,
                  Taz::List->new(
                    tree   => $c_xml->result->dom,
                    length => $length
                  );
            }

            for my $list (@lists) {
                my @items =
                  grep { !$articles_used{ $_->id } } @{ $list->items };
                splice( @items, $list->length );
                for my $item (@items) {
                    $articles_used{ $item->id }++;
                }
                $list->items( \@items );
            }

            render(
                'startseite.txt',
                {
                    lists         => \@lists,
                    host          => $host,
                    port          => $port,
                    members_count => $members_count
                }
            );
        }
    )->wait;
}
elsif ( $selector =~ /(![0-9]+)/ ) {
    my $dom = $ua->get("http://taz.de/$1/c.xml")->res->dom;
    my $item = Taz::Article->new( tree => $dom );
    render(
        'artikel.txt',
        {
            item => $item,
        }
    );
}
elsif ( $selector =~ /(![tap][0-9]+)/ ) {
    my $dom = $ua->get("http://taz.de/$1/c.xml")->res->dom;
    my $list = Taz::List->new( tree => $dom );
    render(
        'liste.txt',
        {
            list => $list,
        }
    );
}
elsif ( $selector =~ /^!s/ ) {
    my ( $selector, $args ) = split( "\t", $selector, 2 );
    my $param = Mojo::Parameters->new( s => "$args" );
    my $s     = $param->to_string;
    my $dom   = $ua->get("http://taz.de/!$s/c.xml")->res->dom;
    my $list  = Taz::List->new( tree => $dom );
    render(
        'liste.txt',
        {
            list => $list,
        }
    );
}

__DATA__

@@ startseite.txt
%= i line '='
%= i 'taz.de'
%= i line '='
%== qq{Das große linke Nachrichten-Portal der "tageszeitung" aus Berlin: Unabhängig dank $members_count GenossInnen. Jetzt auch im Gopherspace.}
%= i ''
%= gophermap 7 => 'Nach Artikeln suchen' => '!s'
%= i ''
%= i line '-'
%= i ''
% for my $list ( @$lists ) {
% if ( $list->title ne 'taz.de' ) {
%= i '-' x $Text::Wrap::columns
%= gophermap 1 => uc($list->title) => $list->url
%= i '-' x $Text::Wrap::columns
%= i ''
% }
% for my $item (@{ $list->items }) {
%    my @authors =  map { $_->name } @{ $item->authors };
%    my $lead     = $item->lead;
%    if ( $lead && @authors ) {
%      $lead = $lead . ' ('. join(', ',@authors) . ')'
%    }
%    my $kicker   = $item->kicker;
%    my $headline = $item->headline;
%    my $selector = $item->url;
%    if ( !$headline && $kicker ) {
%= gophermap 1 => $kicker => $selector
%    }
%    else {
%= gophermap 1 => $headline => $selector
% if ( $kicker ) {
%== $kicker
% }
%    }
%= i ''
%== $lead
%= i ''
% }
% }
%= i ''
@@ liste.txt
%= i ''
%= i line '='
%= i $list->title
%= i line '='
%= i ''
% for my $item (@{ $list->items }) {
%    my $lead     = $item->lead;
%    my $kicker   = $item->kicker;
%    my $headline = $item->headline;
%    my $selector = $item->url;
%    if ( !$headline && $kicker ) {
%= gophermap 1 => $kicker => $selector
%    }
%    else {
%= gophermap 1 => $headline => $selector
%== $kicker
%    }
%= i ''
%== $lead
%= i ''
% }
@@ artikel.txt
%= i ''
%= i line '='
%== $item->headline
%= i line '='
%= i ''
%== $item->lead
%= i ''
%= i line '-'
%= i ''
%= i $item->render_corpus
%= i ''
% if ($item->published ) {
%= i '('. $item->published . ')'
% }
% my @authors = grep { $_->url } @{ $item->authors };
% if ( @authors ) {
%= i ''
%= i line '-'
%= i 'AUTOREN'
%= i line '-'
%= i ''
% for my $author ( @authors ) {
%= gophermap 1 => $author->name => $author->url
% }
% }
%= i ''
% if ( @{ $item->tags } ) {
%= i line '-'
%= i 'TAGS'
%= i line '-'
%= i ''
% for my $tag ( @{ $item->tags } ) {
%= gophermap 1 => $tag->title => $tag->link
% }
% }
