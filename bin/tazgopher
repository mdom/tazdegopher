#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use Text::Wrap qw();
use IO::Handle;

use Mojo::IOLoop;
use Mojo::UserAgent;
use Mojo::ByteStream qw(b);
use Mojo::Util 'html_unescape';
use Mojo::Loader qw(data_section);
use Mojo::Template;
use Mojo::Parameters;

use Text::Unidecode qw();

use Taz::Article;
use Taz::List;

STDOUT->autoflush(1);

my $ua = Mojo::UserAgent->new;
$ua->transactor->name('tazgopher/1.0 (+gopher@taz.de)');

my $host = 'taz.de';
my $port = 70;

if ( $ENV{REMOTE_ADDR} && $ENV{REMOTE_ADDR} eq '193.104.220.35' ) {
    $host = 'ibpj4qv7mufde33w.onion';
}

sub wrap {
    my ( $text, $init, $subsequent ) = @_;
    $init       ||= '';
    $subsequent ||= '';
    Text::Wrap::fill( $init, $subsequent, $text );
}

my $selector = <STDIN>;
$selector =~ s/\r?\n//;

my $query;
( $selector, $query ) = split( "\t", $selector, 2 );

my $url = Mojo::URL->new( $selector || '/' );

$selector = $url->path;
my $wrap = $url->query->param('wrap');

if ($wrap) {
    $Text::Wrap::columns = $wrap || 76;
}

my $gophertype = 1;
if ( $selector =~ m{^/(.)(/.*)$} ) {
    $gophertype = $1;
    $selector   = $2;
}

if ( $selector eq '' or $selector eq '/' or $selector eq '/!p4608' ) {

    my %articles_used;

    Mojo::IOLoop->delay(
        sub {
            my $delay = shift;
            $ua->get( 'http://taz.de/static/tazfbftp/xml/genossenschaft.xml' =>
                  $delay->begin );
            $ua->get( 'http://taz.de/!p4608/l.xml' => $delay->begin );
            $ua->get( 'http://taz.de/!p4608/c.xml' => $delay->begin );
        },
        sub {
            my ( $delay, $geno, $l_xml, $c_xml ) = @_;
            $delay->pass( $geno, $l_xml, $c_xml );
            for
              my $clip_id ( $l_xml->result->dom->find('pages page[type="clip"]')
                ->map( attr => 'id' )->each )
            {
                $ua->get( "http://taz.de/!p$clip_id/c-l.xml" => $delay->begin );
                $ua->get( "http://taz.de/!p$clip_id/c.xml"   => $delay->begin );
            }
        },
        sub {
            my ( $delay, $geno, @responses ) = @_;

            my $members_count =
              $geno->result->dom->at('item[role="members-count"] corpus')->text;

            my @lists;
            while (@responses) {
                my ( $l_xml, $c_xml ) = splice( @responses, 0, 2 );
                my $length = $l_xml->result->dom->find('linklist[type="self"]')
                  ->map( attr => 'length' )->reduce( sub { $a + $b } );

                push @lists,
                  Taz::List->new(
                    tree   => $c_xml->result->dom,
                    length => $length
                  );
            }

            for my $list (@lists) {
                my @items =
                  grep { !$articles_used{ $_->id } } @{ $list->items };
                splice( @items, $list->length );
                for my $item (@items) {
                    $articles_used{ $item->id }++;
                }
                $list->items( \@items );
            }

            render(
                'startseite.txt',
                {
                    lists         => \@lists,
                    host          => $host,
                    port          => $port,
                    members_count => $members_count
                }
            );
        }
    )->wait;
}
elsif ( $selector =~ /(![0-9]+)/ ) {
    my $dom = $ua->get("http://taz.de/$1/c.xml")->res->dom;
    my $item = Taz::Article->new( tree => $dom );
    render(
        'artikel.txt',
        {
            item => $item,
        }
    );
}
elsif ( $selector =~ /(![tap][0-9]+)/ ) {
    my $dom = $ua->get("http://taz.de/$1/c.xml")->res->dom;
    my $list = Taz::List->new( tree => $dom );
    render(
        'liste.txt',
        {
            list => $list,
        }
    );
}
elsif ( $selector =~ /^!s/ ) {
    my $param = Mojo::Parameters->new( s => "$query" );
    my $s     = $param->to_string;
    my $dom   = $ua->get("http://taz.de/!$s/c.xml")->res->dom;
    my $list  = Taz::List->new( tree => $dom );
    render(
        'liste.txt',
        {
            list => $list,
        }
    );
}

sub unidecode {
    my $text = shift;

    my %uppercase_umlauts = (
        'Ä' => 'Ae',
        'Ö' => 'Oe',
        'Ü' => 'Ue',
        'ß' => 'ss',
    );

    my $uc_qr = '([' . join( '', keys %uppercase_umlauts ) . '])';
    $text =~ s/(?<=[[:upper:]])$uc_qr/uc $uppercase_umlauts{$1}/ge;
    $text =~ s/$uc_qr(?=[[:upper:]])/uc $uppercase_umlauts{$1}/ge;

    my %decode_chars = (
        'ä'  => 'ae',
        'ö'  => 'oe',
        'ü'  => 'ue',
        'ß'  => 'ss',
        '“' => '"',
        '„' => '"',
        %uppercase_umlauts
    );

    my $qr = '([' . join( '', keys %decode_chars ) . '])';
    $text =~ s/$qr/$decode_chars{$1}/ge;
    $text =~ s/&amp;/&/g;
    $text = Text::Unidecode::unidecode($text);
    return $text;
}

sub render {
    my ( $file, $vars ) = @_;
    my $mt = Mojo::Template->new( vars => 1 );

    no strict 'refs';
    no warnings 'redefine';
    local *{"@{[$mt->namespace]}::line"} = sub { $_[0] x $Text::Wrap::columns };
    local *{"@{[$mt->namespace]}::wrap"} = sub { wrap( $_[0] ) };
    local *{"@{[$mt->namespace]}::gophermap"} = sub {
        my ( $type, $headline, $selector ) = @_;
        if ($wrap) {
            my $url = Mojo::URL->new($selector);
            $url->query->merge( wrap => $wrap );
            $selector = $url->path_query;
        }
        join( "\t", "$type$headline", $selector, $host, $port );
    };

    $mt->parse( data_section(__PACKAGE__)->{$file} );
    my $output = unidecode( html_unescape( $mt->process($vars) ) );
    if ( $gophertype == 1 ) {
        $output =~ s/^([^\t\n]*?)$/"i$1\t\t$host\t$port"/sgem;
    }
    $output =~ s/\n/\r\n/g;
    print "$output.\r\n";
}

__DATA__

@@ startseite.txt
%= line '='
taz.de
%= line '='
%= wrap(qq{Das große linke Nachrichten-Portal der "tageszeitung" aus Berlin: Unabhängig dank $members_count GenossInnen. Jetzt auch im Gopherspace.})

%= gophermap 7 => 'Nach Artikeln suchen' => '!s'

%= line '-'

% for my $list ( @$lists ) {
% if ( $list->title ne 'taz.de' ) {
%= '-' x $Text::Wrap::columns
%= gophermap 1 => uc($list->title) => $list->url
%= '-' x $Text::Wrap::columns

% }
% for my $item (@{ $list->items }) {
%    my @authors =  map { $_->name } @{ $item->authors };
%    my $lead     = $item->lead;
%    if ( $lead && @authors ) {
%      $lead = $lead . ' ('. join(', ',@authors) . ')'
%    }
%    my $kicker   = $item->kicker;
%    my $headline = $item->headline;
%    my $selector = $item->url;
%    if ( !$headline && $kicker ) {
%= gophermap 1 => $kicker => $selector
%    }
%    else {
%= gophermap 1 => $headline => $selector
% if ( $kicker ) {
%= wrap($kicker)
% }
%    }

%= wrap($lead);

% }
% }
@@ liste.txt

%= $list->title
%= line '='

% for my $item (@{ $list->items }) {
%    my $lead     = $item->lead;
%    my $kicker   = $item->kicker;
%    my $headline = $item->headline;
%    my $selector = $item->url;
%    if ( !$headline && $kicker ) {
%=     gophermap 1 => $kicker => $selector
%    }  else {
%=     gophermap 1 => $headline => $selector
%        if ( $kicker ) {
%=         wrap($kicker)
%        }
%    }
% if ( $lead ) {
%= wrap($lead)
% }
% }
@@ artikel.txt

%= $item->headline
%= line '='

%= wrap($item->lead)

%= line '-'

% my ($content, @links ) = $item->render_corpus;
%= $content

% if ($item->published ) {
%= '('. $item->published . ')'
% }
% if (@links ) {

LINKS
%= line '-'
% my $cnt = 1;
% for my $link ( @links ) {
% my $type = $link->[1] =~ /^URL:/ ? 'h' : 1;
%= gophermap $type => "[$cnt]: " . $link->[0] => $link->[1]
% $cnt++
% }
% }
% my @authors = grep { $_->url } @{ $item->authors };
% if ( @authors ) {

AUTOREN
%= line '-'
% for my $author ( @authors ) {
%= gophermap 1 => $author->name => $author->url
% }
% }
% if ( @{ $item->tags } ) {

TAGS
%= line '-'
% for my $tag ( @{ $item->tags } ) {
%= gophermap 1 => $tag->title => $tag->link
% }
% }
